//
//  OTPTimer.swift
//  
//
//  Created by Lorenzo Limoli on 24/10/23.
//

import Foundation
import Combine

/**
 `OTPTimer` Class

 The `OTPTimer` class is responsible for generating and publishing events related to Time-Based One-Time Password (TOTP) countdowns and OTP changes. It leverages the provided `TOTPProvider` to calculate countdowns and OTPs based on a specified time interval.

 Usage:
 - Create an instance of `OTPTimer` with a starting date, time interval, and a conforming `TOTPProvider`.
 - Subscribe to the `publisher` property to receive events related to countdowns and OTP changes.

 Example:
 ```swift
 let totpProvider = MyTOTPProvider()
 let otpTimer = OTPTimer(startingDate: Date(), interval: 30.0, otpProvider: totpProvider)

 otpTimer.publisher.sink { event in
     switch event {
     case .countdown(let countdownInterval):
         // Handle countdown event
         print("Countdown: \(countdownInterval) seconds")
     case .otpChanged(let otp, let countdownInterval):
         // Handle OTP change event
         print("New OTP: \(otp), Countdown: \(countdownInterval) seconds")
     }
 }
*/
public final class OTPTimer {
    public typealias Interval = TimeInterval
    public typealias Publisher = AnyPublisher<Event, Never>
    
    /**
    Enumeration representing different events generated by OTPTimer.

    - `countdown`: Indicates a countdown value.
    - `otpChanged`: Indicates the OTP of this window.
    */
    public struct Event: Equatable {
        public let countdown: TimeInterval
        public let otp: String
        
        public init(countdown: TimeInterval, otp: String) {
            self.countdown = countdown
            self.otp = otp
        }
    }
    
    /// The publisher that emits events related to countdowns and OTP changes.
    public private(set) lazy var publisher: Publisher = makeEventPublisher()
    
    /// The timestep configured for the timer
    public var timeStep: UInt { countdown.timeStep }
    
    private let countdown: Countdown
    private let otpProvider: TOTPProvider
    
    private var otp: String?
    /**
    Initializes an OTPTimer instance.
     
     - Parameters:
        - countdown: The starting date for the timer (default is the current date).
        - totpProvider: A TOTPProvider conforming instance for generating OTPs.
        - startsAutomatically: A flag that will make countdown starts automatically after init
    */
    public init(countdown: Countdown, totpProvider: TOTPProvider, startsAutomatically: Bool = true) {
        defer { countdown.start() }
        self.countdown = countdown
        self.otpProvider = totpProvider
    }
    
    public func start() {
        countdown.start()
    }
    
    public func stop() {
        countdown.stop()
    }
    
    private func makeEventPublisher() -> Publisher {
        countdown.publisher
            .map{ [weak self, otpProvider] countdownEvent in
                let otpProvider = { self?.otp ?? otpProvider.otp(intervalSince1970: countdownEvent.date.timeIntervalSince1970) }
                let event = self?.makeOtpEvent(using: countdownEvent, otp: otpProvider)
                    ?? Event(countdown: countdownEvent.value, otp: otpProvider())
                self?.otp = event.otp
                return event
            }
            .eraseToAnyPublisher()
    }
    
    private func makeOtpEvent(using countdownEvent: Countdown.Event, otp: () -> String) -> Event {
        switch countdownEvent {
        case .windowChanged(let value, let date):
            let otp = otpProvider.otp(intervalSince1970: date.timeIntervalSince1970)
            return Event(countdown: value, otp: otp)
            
        case .countdown(let value, _):
            return Event(countdown: value, otp: otp())
        }

    }
}
